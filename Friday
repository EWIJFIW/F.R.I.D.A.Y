import speech_recognition as sr
import keyboard
import torch
import sounddevice as sd
import webbrowser as wb
from datetime import datetime, date
import pyttsx3
import requests
from g4f.client import Client

recognizer = sr.Recognizer()
engine = pyttsx3.init()

Google1, Google2 = "google", "гугл"
Slith1, Slith2, Slith3 = "игра", "игру", "играть"
Yout1, Yout2 = "youtube", "ютуб"
mus1, mus2 = "музыка", "музыку"
poc1, poc2 = "почта", "почту"
time1, time2 = "время","времени"
data1, data2 = "дата","число"
weather1, weather2 = "погода","пагода"

device = torch.device('cpu')
model, _ = torch.hub.load(repo_or_dir='snakers4/silero-models',
                         model='silero_tts',
                         language='ru',
                         speaker='v3_1_ru')
def speak(text):
    audio = model.apply_tts(
        text=text,
        speaker='xenia', 
        sample_rate=48000
    )
    sd.play(audio, 48000)
    sd.wait()

speak("Нажмите на кью чтобы говорить, если вы хотите использовать нейросеть то нажмите на йээ     .")
print("Нажмите на Q чтобы говорить, если вы хотите использовать нейросеть, то нажмите на E...")

while True:
    if keyboard.is_pressed('q'):
        print("Клавиша нажата")
        sd.stop()
        speak("Слушаю        .")
        print("Слушаю...")
        with sr.Microphone() as source:
            sd.stop()
            recognizer.adjust_for_ambient_noise(source)  
            audio = recognizer.listen(source, timeout=0)
            data = recognizer.recognize_google(audio, language="ru-RU").lower()  
            print("Вы сказали:",data)

            if Google1 in data or Google2 in data:
                wb.open("https://www.google.com/")
                speak("открываю        .")
                print("Открываю...")
            if Slith1 in data or Slith2 in data or Slith3 in data:
                wb.open("http://slither.com/io/")
                speak("включаю        .")
                print("Включаю...")
            if Yout1 in data or Yout2 in data:
                wb.open("https://www.youtube.com/")
                speak("открываю        .")
                print("Открываю...")
            if mus1 in data or mus2 in data:
                wb.open("https://www.youtube.com/watch?v=4xDzrJKXOOY")
                speak("включаю        .")
                print("Включаю...")
            if poc1 in data or poc2 in data:
                wb.open("https://mail.google.com") 
                speak("открываю        .")
                print("Открываю...")
            if time1 in data or time2 in data:
                now = datetime.now()
                hours_minutes = now.strftime("%H:%M")
                engine.say(hours_minutes) 
                engine.runAndWait()
            if data1 in data or data2 in data:
                current_date = date.today()
                engine.say(current_date)
                engine.runAndWait()
            if weather1 in data or weather2 in data:
                city = 'Санкт-Петербург'
                url = 'https://api.openweathermap.org/data/2.5/weather?q='+city+'&units=metric&lang=ru&appid=79d1ca96933b0328e1c7e3e7a26cb347'
                weather_data = requests.get(url).json()
                temperature = round(weather_data['main']['temp'])
                engine.say(str(temperature)+"Градусов цельсия")
                engine.runAndWait()
            
    if keyboard.is_pressed('e'):
        print("Клавиша нажата")
        sd.stop()
        speak("Слушаю        .")
        print("Слушаю...")
        with sr.Microphone() as source:
            sd.stop()
            recognizer.adjust_for_ambient_noise(source)  
            audio = recognizer.listen(source, timeout=0)
            data = recognizer.recognize_google(audio, language="ru-RU").lower()  
            print("Вы сказали:",data)

            client = Client()
            response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": data}],
                        web_search=False
                    )
            speak(response.choices[0].message.content)
            print(response.choices[0].message.content)
